@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}


@model StationeryAPI.ShoppingModels.NewOrder

@{
    ViewData["Title"] = "Create Order";
}

<h2>Create Order</h2>

<form id="orderForm">
    <div>
        <label for="customerId">Customer ID:</label>
        <input type="text" id="customerId" name="customerId" required>
    </div>
    <div>
        <label for="totalPrice">Total Price:</label>
        <input type="number" id="totalPrice" name="totalPrice" required step="0.01">
    </div>
    <div>
        <label for="orderStatus">Order Status:</label>
        <input type="text" id="orderStatus" name="orderStatus" required>
    </div>
    <button type="submit">Submit Order</button>
</form>

<div id="orderResult"></div>

@section Scripts {
    <script>
        document.getElementById('orderForm').addEventListener('submit', async function (event) {
            event.preventDefault(); // Prevent the default form submission

            // Gather form data into an order object
            var order = {
                customerId: document.getElementById('customerId').value,
                totalPrice: parseFloat(document.getElementById('totalPrice').value),
                orderStatus: document.getElementById('orderStatus').value,
                // Set other properties as needed
            };

            try {
                const response = await fetch('https://localhost:7106/api/Customer/CreateOrder', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(order)
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    console.error('Failed to create order:', errorData);
                    document.getElementById('orderResult').textContent = 'Failed to create order: ' + JSON.stringify(errorData);
                } else {
                    const createdOrder = await response.json();
                    console.log('Order created:', createdOrder);

                    // Here is where you place the code to update the 'orderResult' div
                    document.getElementById('orderResult').innerHTML = `
                                        <h3>Order Created Successfully!</h3>
                                        <div><strong>Order ID:</strong> ${createdOrder.orderId}</div>
                                        <div><strong>Customer ID:</strong> ${createdOrder.customerId}</div>
                                        <div><strong>Total Price:</strong> ${createdOrder.totalPrice.toFixed(2)}</div>
                                        <div><strong>Order Status:</strong> ${createdOrder.orderStatus}</div>
                                        <div><strong>Order Date:</strong> ${new Date(createdOrder.orderDate).toLocaleString()}</div>
                                        <!-- Display other properties as needed -->
                                    `;
                }
            } catch (error) {
                console.error('Error:', error);
                document.getElementById('orderResult').textContent = 'An error occurred while sending the order.';
            }
        });
    </script>
}


