
@model StationeryWEB.Models.UpdateOrder

@{
    ViewData["Title"] = "Update Order";
}

<h2>Update Order</h2>

<form id="updateorderForm">
    <div>
        <label for="orderId">Order ID:</label>
        <input type="text" id="orderId" name="orderId" required>
    </div>
    <div>
        <label for="orderDate">Order Date:</label>
        <input type="date" id="orderDate" name="orderDate" required>
    </div>
    <div>
        <label for="customerId">Customer ID:</label>
        <input type="text" id="customerId" name="customerId" required>
    </div>
    <div>
        <label for="productId">Product ID:</label>
        <input type="text" id="productId" name="productId" required>
    </div>
    <div>
        <label for="totalPrice">Total Price:</label>
        <input type="number" id="totalPrice" name="totalPrice" required step="0.01">
    </div>
    <div>
        <label for="orderStatus">Order Status:</label>
        <input type="text" id="orderStatus" name="orderStatus" required>
    </div>

    <div>
        <label for="DeliveryType">Delivery Type:</label>
        <input type="text" id="deliveryType" name="deliveryType" required>
    </div>
    <div>
        <label for="DeliveryFee">Delivery Fee:</label>
        <input type="number" id="deliveryFee" name="deliveryFee" required step="0.01">
    </div>
    <div>
        <label for="PaymentMethod">Payment Method:</label>
        <input type="text" id="paymentMethod" name="paymentMethod" required>
    </div>
    <div>
        <label for="PaymentStatus">Payment Status:</label>
        <input type="text" id="paymentStatus" name="paymentStatus" required>
    </div>

    <button type="submit">Update Order</button>
</form>

<div id="orderResult"></div>

@section Scripts {
    <script>
        document.getElementById('updateorderForm').addEventListener('submit', async function (event) {
            event.preventDefault(); // Prevent the default form submission

            // Gather form data into an order object
            var order = {
                orderId: document.getElementById('orderId').value,
                orderDate: document.getElementById('orderDate').value,
                customerId: document.getElementById('customerId').value,
                productId: document.getElementById('productId').value,
                totalPrice: parseFloat(document.getElementById('totalPrice').value),
                orderStatus: document.getElementById('orderStatus').value,
                deliveryType: document.getElementById('deliveryType').value,
                deliveryFee: parseFloat(document.getElementById('deliveryFee').value),
                paymentMethod: document.getElementById('paymentMethod').value,
                paymentStatus: document.getElementById('paymentStatus').value,
                // Set other properties as needed
            };

            try {
                const response = await fetch('https://localhost:7106/api/Customer/UpdateOrder', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(order)
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    console.error('Failed to create order:', errorData);
                    document.getElementById('orderResult').textContent = 'Failed to create order: ' + JSON.stringify(errorData);
                } else {
                    const returnorder = await response.json();
                    console.log('Order updated:', returnorder);

                    // Here is where you place the code to update the 'orderResult' div
                    document.getElementById('orderResult').innerHTML = `
                                                                <h3>Order Updated Successfully!</h3>
                                                                <div><strong>Order ID:</strong> ${returnorder.orderId}</div>
                                                                <div><strong>Product ID:</strong> ${returnorder.productId}</div>
                                                                <div><strong>Customer ID:</strong> ${returnorder.customerId}</div>
                                                                <div><strong>Total Price:</strong> ${returnorder.totalPrice.toFixed(2)}</div>
                                                                <div><strong>Order Status:</strong> ${returnorder.orderStatus}</div>
                                                                <div><strong>Order Date:</strong> ${new Date(returnorder.orderDate).toLocaleString()}</div>
                                                                        <div><strong>Delivery Type:</strong> ${returnorder.deliveryType}</div>
                                                                        <div><strong>Delivery Fee:</strong> ${returnorder.deliveryFee}</div>
                                                                        <div><strong>Payment Method:</strong> ${returnorder.paymentMethod}</div>
                                                                        <div><strong>Payment Status:</strong> ${returnorder.paymentStatus}</div>
                                                                <!-- Display other properties as needed -->
                                                            `;
                }
            } catch (error) {
                console.error('Error:', error);
                document.getElementById('orderResult').textContent = 'An error occurred while sending the order.';
            }
        });
    </script>
}


