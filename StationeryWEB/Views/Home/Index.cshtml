@model ProductPageViewModel

@{
    ViewData["Title"] = "Index";
}

<h2>Products</h2>

<style>
    .product {
        float: left;
        width: 200px; /* Adjust width as needed */
        margin-right: 20px; /* Space between product blocks */
        text-align: center; /* Center align the text below the image */
    }

        .product img {
            width: 100%; /* Make image fill the container */
            height: auto; /* Keep image aspect ratio */
        }

        .product div {
            margin-top: 5px; /* Space between text elements */
        }

        .product button {
            margin-top: 10px; /* Space above the button */
            padding: 8px 16px; /* Padding for button size */
            background-color: #007BFF; /* Button color */
            color: white; /* Text color */
            border: none;
            border-radius: 4px; /* Rounded corners */
            cursor: pointer; /* Pointer cursor on hover */
        }

            .product button:hover {
                background-color: #0056b3; /* Darker shade on hover */
            }

    .clear {
        clear: both; /* Clear float */
    }
</style>

@foreach (var item in Model.Products)
{
    <div class="product">
        <img src="/assets/grape.jpg" alt="@item.ProName" />
        @* <div>@item.ProId</div> *@
        @* <div>@item.ProName</div> *@
        <div>@item.Description</div>
        <div>@item.Price</div>
        <button onclick="location.href='@Url.Action("RegisterProductById", "Home", new { id = item.ProId })'">Order Now</button>
    </div>
}

<div class="clear"></div>

<div>
    Page @Model.CurrentPage of @Model.TotalPages

    @if (Model.CurrentPage > 1)
    {
        <button onclick="goToPage(@(Model.CurrentPage - 1))">Previous</button>
    }

    @if (Model.CurrentPage < Model.TotalPages)
    {
        <button type="button" onclick="goToPage(@(Model.CurrentPage + 1))">Next</button>
    }
</div>

<script>
    function goToPage(page) {
        const url = new URL(window.location);
        url.searchParams.set('page', page);
        // Preserve the pageSize selection when navigating pages
        const pageSize = document.querySelector('select[name="pageSize"]').value;
        url.searchParams.set('pageSize', pageSize);
        console.log(url.href);
        window.location.href = url.href; // Navigate with the new query parameters.
    }
</script>

<div>
    @for (int i = 1; i <= Model.TotalPages; i++)
    {
        <button type="button" onclick="goToPage(@i)">@i</button>
    }
</div>

<div>
    <form method="get">
        <label for="pageSize">Products per page:</label>
        <select name="pageSize" onchange="this.form.submit()">
            <option selected="selected" value="@Model.PageSize">@Model.PageSize</option>
            <option value="5">5</option>
            <option value="10">10</option>
            <option value="20">20</option>
        </select>
    </form>
</div>

